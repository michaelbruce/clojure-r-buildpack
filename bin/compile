#!/usr/bin/env bash

set -e

BUILD_DIR=$1
CACHE_DIR="$2/vendor"

mkdir -p $CACHE_DIR

# Building R binary

if [ -z "${STACK}" ];
then
  STACK="cedar-14"
fi

S3_BUCKET="heroku-buildpack-r"
BUILD_PACK_VERSION="20160720-0331"
R_VERSION="3.3.1"
R_BINARIES="http://${S3_BUCKET}.s3.amazonaws.com/${STACK}/R-${R_VERSION}-binaries-${BUILD_PACK_VERSION}.tar.gz"

# Building Java binary

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
. $BIN_DIR/java
. $BIN_DIR/util

# Install JDK
install_java_with_overlay ${BUILD_DIR}

java -version

# Install boot

get_latest_boot_version() {
  curl -s https://api.github.com/repos/boot-clj/boot/releases \
    | grep 'download_url.*boot\.sh' \
    | head -1 \
    | awk -F '/' '{print $(NF-1)}'
}

BOOT_SH_VERSION=$(get_latest_boot_version)
BOOT_SH_URL="https://github.com/boot-clj/boot/releases/download/${BOOT_SH_VERSION}/boot.sh"
BOOT_SH_CACHE_PATH="$CACHE_DIR/boot"
BOOT_SH_SLUG_PATH="$BUILD_DIR/boot"

if [ ! -r "$BOOT_SH_CACHE_PATH" ]; then
    echo "-----> Installing Boot ${BOOT_SH_VERSION} from github..."
    echo "       Downloading boot.sh"
    echo $BOOT_SH_CACHE_PATH
    echo $BOOT_SH_URL
    curl -L -s -o "$BOOT_SH_CACHE_PATH" "$BOOT_SH_URL"
    chmod a+x "$BOOT_SH_CACHE_PATH"
    echo "       ...done"
else
    echo "-----> Using cached Boot"
fi

# Printing diagnostic information

export PATH="$BUILD_DIR:$CACHE_DIR:$PATH"

echo $PATH

# Compile application as an uberjar

boot build
