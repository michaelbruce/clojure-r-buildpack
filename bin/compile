#!/usr/bin/env bash

set -e

BUILD_DIR=$1
CACHE_DIR="$2/vendor"
VENDOR_DIR="$BUILD_DIR/vendor"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"
[ -z "${STACK}" ] && STACK="cedar-14"
[ -z "${CRAN_MIRROR}" ] && CRAN_MIRROR="http://cloud.r-project.org"

mkdir -p $CACHE_DIR
mkdir -p $VENDOR_DIR

# Building R binary

S3_BUCKET="heroku-buildpack-r"
BUILD_PACK_VERSION="20160720-0331"
R_VERSION="3.3.1"
R_BINARIES="http://${S3_BUCKET}.s3.amazonaws.com/${STACK}/R-${R_VERSION}-binaries-${BUILD_PACK_VERSION}.tar.gz"

# vendor R into the slug
echo "Vendoring R $R_VERSION for $STACK stack ($BUILD_PACK_VERSION)"
echo "Downloading and unpacking R binaries ($R_BINARIES)"
curl $R_BINARIES -s -o - | tar xzf - -C $BUILD_DIR

# mkdir -p /app/.apt
# cp -R $VENDOR_DIR/.apt/* /app/.apt

mkdir -p /app/vendor/R
cp -R $VENDOR_DIR/R/* /app/vendor/R
cp -R $VENDOR_DIR/R/* /app/vendor/R

export PATH="$BUILD_DIR:/app/vendor/R/bin:/app/.apt/usr/bin:$PATH"
export R_INCLUDE="/app/vendor/R/lib64/R/include"
export LD_LIBRARY_PATH="/app/.apt/usr/lib/libblas:/app/.apt/usr/lib/lapack:/app/.apt/usr/lib/x86_64-linux-gnu:/app/.apt/usr/lib/i386-linux-gnu:/app/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="/app/.apt/usr/lib/x86_64-linux-gnu:/app/.apt/usr/lib/i386-linux-gnu:/app/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="/app/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="/app/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:/app/.apt/usr/lib/i386-linux-gnu/pkgconfig:/app/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
export LDFLAGS="-L/app/.apt/usr/lib/libblas -L/app/.apt/usr/lib/lapack $LDFLAGS"

$BUILD_DIR/R --no-save -e "install.packages('Rserve', repos='http://cran.us.r-project.org')"

# Building Java binary

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
. $BIN_DIR/java
. $BIN_DIR/util

# Install JDK
install_java_with_overlay ${BUILD_DIR}

java -version

echo "JAVA_OPTS: $JAVA_OPTS"

# Install boot

get_latest_boot_version() {
  curl -s https://api.github.com/repos/boot-clj/boot/releases \
    | grep 'download_url.*boot\.sh' \
    | head -1 \
    | awk -F '/' '{print $(NF-1)}'
}

BOOT_SH_VERSION=$(get_latest_boot_version)
BOOT_SH_URL="https://github.com/boot-clj/boot/releases/download/${BOOT_SH_VERSION}/boot.sh"
BOOT_SH_CACHE_PATH="$CACHE_DIR/boot"
BOOT_SH_SLUG_PATH="$BUILD_DIR/boot"

if [ ! -r "$BOOT_SH_CACHE_PATH" ]; then
    echo "-----> Installing Boot ${BOOT_SH_VERSION} from github..."
    echo "       Downloading boot.sh"
    echo $BOOT_SH_CACHE_PATH
    echo $BOOT_SH_URL
    curl -L -s -o "$BOOT_SH_CACHE_PATH" "$BOOT_SH_URL"
    chmod a+x "$BOOT_SH_CACHE_PATH"
    echo "       ...done"
else
    echo "-----> Using cached Boot"
fi

# Printing diagnostic information

export PATH="$BUILD_DIR:$CACHE_DIR:$PATH"

echo $PATH

# Compile application as an uberjar

boot build
